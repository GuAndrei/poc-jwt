Last revision (mm/dd/yy): '''{{REVISIONMONTH}}/{{REVISIONDAY}}/{{REVISIONYEAR}}'''

= Introduction  =

We saw many application use '''JSON Web Tokens''' (JWT) to allow the client to indicate is identity for further exchange after authentication.

From ''https://jwt.io/introduction'':

''JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.''

JWT token are not automatically sent by the browser like the Cookies but they are exposed to issues like the following:

* Token replay from another location (attacker computer) after stealing,
* Information disclosure by the token (ex: security roles),
* '''None''' algorithm issue:
** https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/
* Token storage on client side,
* Alteration of the ciphered token in order to perform cryptanalysis.

= Objective =

This article have for objective to provide an implementation proposal in order to prevent the issues above, all using JWT official [https://jwt.io/#libraries API].

To achieve these goals we will apply the following action:

* Add context in the token about the client browser,
* Cipher the token using an algorithm supporting authenticated encryption.

= Implementation =

Running code is located [https://github.com/righettod/poc-jwt here].

== Server side ==

'''Database structure'''

<pre>
create table if not exists nonce(jwt_token_digest varchar(255) primary key, gcm_nonce varchar(255) not null unique, gcm_aad varchar(255) not null unique);
create index if not exists idx_nonce on nonce(gcm_nonce);
</pre>


'''Ciphering implementation'''

<pre>
/**
 * Handle ciphering and deciphering of the token using AES-GCM.
 * Use a DB in order to link a GCM NONCE to a ciphered message and ensure that a NONCE is never reused
 * and also allow use of several application node in load balancing.
 */
public class TokenCipher {

    /** AES-GCM parameters */
    private static final int GCM_NONCE_LENGTH = 12; // in bytes

    /** AES-GCM parameters */
    private static final int GCM_TAG_LENGTH = 16; // in bytes

    /**Secure random generator */
    private final SecureRandom secRandom = new SecureRandom();

    /** DB Connection */
    @Resource("jdbc/storeDS")
    private DataSource storeDS;

    /**
     * Cipher a JWT
     * @param jwt Token to cipher
     * @param key Ciphering key
     * @return the ciphered version of the token encoded in HEX
     * @throws Exception If any issue occur during token ciphering operation
     */
    public String cipherToken(String jwt, byte[] key) throws Exception {
        //Verify parameters
        if(jwt == null || jwt.isEmpty() || key.length == 0){
            throw new IllegalArgumentException("Both parameters must be specified !");
        }

        //Generate a NONCE
        //NOTE: As in the DB, the column to store the NONCE is flagged UNIQUE then the insert will fail
        //if the NONCE already exists, normally as we use the Java Secure Random implementation it will never happen.
        final byte[] nonce = new byte[GCM_NONCE_LENGTH];
        secRandom.nextBytes(nonce);

        //Prepare ciphering key from bytes provided
        SecretKey aesKey = new SecretKeySpec(key, 0, key.length, "AES");

        //Setup Cipher
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding", "SunJCE");
        GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, nonce);
        cipher.init(Cipher.ENCRYPT_MODE, aesKey, spec);

        //Add "Additional Authentication Data" (AAD) in order to operate in AEAD mode - Generate it
        byte[] aad = new byte[32];
        secRandom.nextBytes(aad);
        cipher.updateAAD(aad);

        //Cipher the token
        byte[] cipheredToken = cipher.doFinal(jwt.getBytes("utf-8"));

        //Compute a SHA256 of the ciphered token
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] cipheredTokenDigest = digest.digest(cipheredToken);

        //Store GCM NONCE and GCM AAD
        this.storeNonceAndAAD(DatatypeConverter.printHexBinary(nonce), DatatypeConverter.printHexBinary(aad),
        DatatypeConverter.printHexBinary(cipheredTokenDigest));

        return DatatypeConverter.printHexBinary(cipheredToken);
    }

    /**
     * Decipher a JWT
     * @param jwtInHex Token to decipher encoded in HEX
     * @param key Ciphering key
     * @return The token in clear text
     * @throws Exception If any issue occur during token deciphering operation
     */
    public String decipherToken(String jwtInHex, byte[] key) throws Exception{
        //Verify parameters
        if(jwtInHex == null || jwtInHex.isEmpty() || key.length == 0){
            throw new IllegalArgumentException("Both parameters must be specified !");
        }

        //Decode the ciphered token
        byte[] cipheredToken = DatatypeConverter.parseHexBinary(jwtInHex);

        //Compute a SHA256 of the ciphered token
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] cipheredTokenDigest = digest.digest(cipheredToken);

        //Read the GCM NONCE and GCM AAD associated from the DB
        Map<String,String> gcmInfos = this.readNonceAndAAD(DatatypeConverter.printHexBinary(cipheredTokenDigest));
        if(gcmInfos == null){
            throw new Exception("Cannot found a NONCE and AAD associated to the token provided !");
        }
        byte[] nonce = DatatypeConverter.parseHexBinary(gcmInfos.get("NONCE"));
        byte[] aad = DatatypeConverter.parseHexBinary(gcmInfos.get("AAD"));

        //Prepare ciphering key from bytes provided
        SecretKey aesKey = new SecretKeySpec(key, 0, key.length, "AES");

        //Setup Cipher
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding", "SunJCE");
        GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, nonce);
        cipher.init(Cipher.DECRYPT_MODE, aesKey, spec);

        //Add "Additional Authentication Data" (AAD) in order to operate in AEAD mode
        cipher.updateAAD(aad);

        //Decipher the token
        byte[] decipheredToken = cipher.doFinal(cipheredToken);

        return new String(decipheredToken);
    }


    /**
     * Store GCM NONCE and GCM AAD in the DB
     * @param nonceInHex Nonce encoded in HEX
     * @param aadInHex AAD encoded in HEX
     * @param jwtTokenDigestInHex SHA256 of the JWT ciphered token encoded in HEX
     * @throws Exception If any issue occur during communication with DB
     */
    private void storeNonceAndAAD(String nonceInHex, String aadInHex, String jwtTokenDigestInHex) throws Exception {
        try (Connection con = this.storeDS.getConnection()) {
            String query = "insert into nonce(jwt_token_digest, gcm_nonce, gcm_aad) values(?, ?, ?)";
            int insertedRecordCount;
            try (PreparedStatement pStatement = con.prepareStatement(query)) {
                pStatement.setString(1, jwtTokenDigestInHex);
                pStatement.setString(2, nonceInHex);
                pStatement.setString(3, aadInHex);
                insertedRecordCount = pStatement.executeUpdate();
            }
            if (insertedRecordCount != 1) {
                throw new IllegalStateException("Number of inserted record is invalid, 1 expected but is " + insertedRecordCount);
            }
        }
    }

    /**
     * Read GCM NONCE and GCM AAD from the DB
     * @param jwtTokenDigestInHex SHA256 of the JWT ciphered token encoded in HEX for which we must read the NONCE and AAD
     * @return A dict containing the NONCE and AAD if they exists for the specified token
     * @throws Exception If any issue occur during communication with DB
     */
    private  Map<String,String> readNonceAndAAD(String jwtTokenDigestInHex) throws Exception{
        Map<String,String> gcmInfos = null;
        try (Connection con = this.storeDS.getConnection()) {
            String query = "select gcm_nonce, gcm_aad from nonce where jwt_token_digest = ?";
            try (PreparedStatement pStatement = con.prepareStatement(query)) {
                pStatement.setString(1, jwtTokenDigestInHex);
                try (ResultSet rSet = pStatement.executeQuery()) {
                    while (rSet.next()) {
                        gcmInfos = new HashMap<>(2);
                        gcmInfos.put("NONCE", rSet.getString(1));
                        gcmInfos.put("AAD", rSet.getString(2));
                    }
                }
            }
        }

        return gcmInfos;
    }

}
</pre>


'''REST services (using JAX-RS)''': One to create the JWT token and one to validate it on user further request

<pre>
/**
 * Provides REST stateless services to manage JWT token.
 */
@Path("/")
public class TokenServices {

    /** Logger */
    private static final Logger LOG = LoggerFactory.getLogger(TokenServices.class);

    /**Accessor for HMAC - Block serialization and storage as String in JVM memory*/
    private transient byte[] keyHMAC = null;

    /**Accessor for Ciphering keys - Block serialization and storage as String in JVM memory*/
    private transient byte[] keyCiphering = null;

    /**Accessor for Issuer ID - Block serialization*/
    private transient String issuerID = null;

    /** Handler for token ciphering */
    private TokenCipher tokenCipher;

    /**
     * Constructor - Load keys and issuer ID
     * @throws IOException If any issue occur during keys loading
     */
    public TokenServices() throws IOException {
        //Load keys from configuration text files in order to avoid to store keys as String in JVM memory
        this.keyHMAC = Files.readAllBytes(Paths.get("src","main","conf","key-hmac.txt"));
        this.keyCiphering = Files.readAllBytes(Paths.get("src","main","conf","key-ciphering.txt"));

        //Load issuer ID from configuration text files
        this.issuerID = Files.readAllLines(Paths.get("src","main","conf","issuer-id.txt")).get(0);

        //Init token ciphering handler
        this.tokenCipher = new TokenCipher();
    }

    /**
     * Authenticate (simulation here) a user based on a login/password couple and return a JWT token
     * @param request Incoming HTTP request
     * @param login User login
     * @param password User password
     * @param browserFingerprintDigest SHA256 digest of the user browser fingerprint encoded in HEX
     * @return A HTTP response containing the JWT token
     */
    @Path("authenticate")
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public Response authenticate(@Context HttpServletRequest request, @FormParam("login") String login,
    @FormParam("password") String password,
    @FormParam("browserFingerprintDigest") String browserFingerprintDigest){
        //As it's an authentication simulation we explicitly ignore the password here...
        JSONObject jsonObject = new JSONObject();
        Response r;
        try{
            //Validate the login and the browserFingerprintDigest parameters content to avoid malicious input
            if(Pattern.matches("[a-zA-Z0-9]{1,10}", login) && Pattern.matches("[a-z0-9]{64}", browserFingerprintDigest)){
                //Create the token with a validity of 15 minutes and client context (IP + Browser fingerprint digest) information
                Calendar c = Calendar.getInstance();
                Date now = c.getTime();
                c.add(Calendar.MINUTE, 15);
                Date expirationDate = c.getTime();
                Map<String, Object> headerClaims = new HashMap<>();
                headerClaims.put("typ", "JWT");
                String token = JWT.create().withSubject(login)
                                       .withExpiresAt(expirationDate)
                                       .withIssuer(this.issuerID)
                                       .withIssuedAt(now)
                                       .withNotBefore(now)
                                       .withClaim("clientIP", this.retrieveClientIP(request))
                                       .withClaim("browserFingerprintDigest", browserFingerprintDigest)
                                       .withHeader(headerClaims)
                                       .sign(Algorithm.HMAC256(this.keyHMAC));
                //Cipher the token
                String cipheredToken = this.tokenCipher.cipherToken(token, this.keyCiphering);
                //Set token in data container
                jsonObject.put("token", cipheredToken);
                jsonObject.put("status", "Authentication successful !");
            }else{
                jsonObject.put("token", "-");
                jsonObject.put("status", "Invalid parameter provided !");
            }

            //Build response
            r = Response.ok(jsonObject.toString(), MediaType.APPLICATION_JSON).build();
        } catch (Exception e) {
            LOG.error("Error during authentication", e);
            //Return a generic error message
            jsonObject.put("token", "-");
            jsonObject.put("status", "An error occur !");
            r = Response.ok(jsonObject.toString(), MediaType.APPLICATION_JSON).build();
        }

        return r;
    }


    /**
     * Validate the legitimacy of a call with a JWT
     * Normally this code is not a service but it's included in the application as shared function and used by all business services to validate the token
     * before allowing any business processing
     * @param request Incoming HTTP request
     * @param browserFingerprintDigest SHA256 digest of the user browser fingerprint encoded in HEX
     * @return A HTTP response containing the validity status of the call
     */
    @Path("validate")
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public Response validate(@Context HttpServletRequest request, @FormParam("browserFingerprintDigest") String browserFingerprintDigest){
        //As it's an authentication simulation we explicitly ignore the password here...
        JSONObject jsonObject = new JSONObject();
        Response r;
        try{
            //Retrieve the token
            String cipheredToken = request.getHeader("Authorization");
            if(cipheredToken != null){
                //Remove the "Bearer" string part
                cipheredToken = cipheredToken.split(" ")[1].trim();
            }

            //Validate the browserFingerprintDigest and token parameters content to avoid malicious input
            if(Pattern.matches("[a-z0-9]{64}", browserFingerprintDigest) && cipheredToken != null){
                //Decipher the token
                String token = this.tokenCipher.decipherToken(cipheredToken,this.keyCiphering);
                //Create a verification context for the token
                JWTVerifier verifier = JWT.require(Algorithm.HMAC256(this.keyHMAC))
                                               .withIssuer(this.issuerID)
                                               .withClaim("clientIP", this.retrieveClientIP(request))
                                               .withClaim("browserFingerprintDigest", browserFingerprintDigest)
                                               .build();
                //Verify the token
                DecodedJWT decodedToken = verifier.verify(token);
                //Set token in data container
                jsonObject.put("status", "Token OK - Welcome '" + decodedToken.getSubject() + "' !");
            }else{
                jsonObject.put("status", "Invalid parameter provided !");
            }

            //Build response
            r = Response.ok(jsonObject.toString(), MediaType.APPLICATION_JSON).build();
        }
        catch (JWTVerificationException e) {
            LOG.warn("Verification of the token failed", e);
            //Return a generic error message
            jsonObject.put("status", "Invalid token !");
            r = Response.ok(jsonObject.toString(), MediaType.APPLICATION_JSON).build();
        }
        catch (Exception e) {
            LOG.warn("Error during token validation", e);
            //Return a generic error message
            jsonObject.put("status", "An error occur !");
            r = Response.ok(jsonObject.toString(), MediaType.APPLICATION_JSON).build();
        }

        return r;
    }

    /**
     * Return the client IP address
     * @param request Incoming HTTP request
     * @return The client IP address
     * @throws IllegalArgumentException If the IP retrieved is invalid
     * @see "https://en.wikipedia.org/wiki/X-Forwarded-For"
     */
    private String retrieveClientIP(HttpServletRequest request) throws IllegalArgumentException{
        String address;
        //Get IP from X-Forwarded-For header or from the request object directly
        String ip = request.getHeader("X-Forwarded-For");
        if(ip != null){
            if(ip.contains(",")){
                ip = ip.split(",")[0];
            }
            address = ip.trim();
        }else{
            address = request.getRemoteAddr();
        }
        //Validate IP format
        //"InetAddressValidator" came from "commons-validator" API
        if(!InetAddressValidator.getInstance().isValid(address)){
            throw new IllegalArgumentException("Invalid IP address !");
        }

        return address;
    }
}
</pre>



== Client side ==

'''JavaScript code to generate the browser fingerprint'''

<pre>
/* Generate a fingerprint string for the browser */
function generateFingerprint(){
    //Generate a string based on "stable" information taken from the browser
    //We call here "stable information", information that normally don't change during the user
    //browse the application just after authentication
    var fingerprint = [];

    //Take plugins
    for(var i = 0; i < navigator.plugins.length; i++){
       fingerprint.push(navigator.plugins[i].name);
       fingerprint.push(navigator.plugins[i].filename);
       fingerprint.push(navigator.plugins[i].description);
       fingerprint.push(navigator.plugins[i].version);
    }

    //Take User Agent
    fingerprint.push(navigator.userAgent);

    //Take Screen resolution
    fingerprint.push(screen.availHeight);
    fingerprint.push(screen.availWidth);
    fingerprint.push(screen.colorDepth);
    fingerprint.push(screen.height);
    fingerprint.push(screen.pixelDepth);
    fingerprint.push(screen.width);

    //Take Graphical card info
    //See http://output.jsbin.com/ovekor/3/
    try {
        //Add a Canvas element if the body do not contains one
        if ( $("#glcanvas").length == 0 ){
            $(document.body).append("<canvas id='glcanvas'></canvas>");
        }
        //Get ref on Canvas
        var canvas = document.getElementById("glcanvas");
        //Retrieve Canvas properties
	    gl = canvas.getContext("experimental-webgl");
	    gl.viewportWidth = canvas.width;
	    gl.viewportHeight = canvas.height;
        fingerprint.push(gl.getParameter(gl.VERSION));
        fingerprint.push(gl.getParameter(gl.SHADING_LANGUAGE_VERSION));
        fingerprint.push(gl.getParameter(gl.VENDOR));
        fingerprint.push(gl.getParameter(gl.RENDERER));
        fingerprint.push(gl.getSupportedExtensions().join());
    } catch (e) {
        //Get also error because it's will be stable too..
        fingerprint.push(e);
    }

    //Last and, in order to made this browser unique, generate a random ID that we will store
    //in local storage (in order to be persistent after browser close/reopen)
    //Add this ID because, in Enterprise, most of the time browser have the same configuration
    var browserUniqueID = localStorage.getItem("browserUniqueID");
    if (browserUniqueID === null) {
      localStorage.setItem("browserUniqueID", CryptoJS.lib.WordArray.random(80));
      browserUniqueID = localStorage.getItem("browserUniqueID");
    }
    fingerprint.push(browserUniqueID);

    return fingerprint.join();
}
</pre>


'''JavaScript code to call the REST service and store the token on client side'''

<pre>
/* Handle request for JWT token and local storage*/
function getToken(){
    var login = $("#login").val();
    var password = $("#password").val();
    var fingerprint = generateFingerprint();
    var fingerprintHash = CryptoJS.SHA256(fingerprint);
    var postData = "login=" + encodeURIComponent(login) + "&password=" + encodeURIComponent(password) +"&browserFingerprintDigest="
    + encodeURIComponent(fingerprintHash);

    $.post("/services/authenticate", postData,function (data){
        if(data.status == "Authentication successful !"){
            $("#infoZone").removeClass();
            $("#infoZone").addClass("alert alert-success");
            $("#infoZone").text("Token received and stored in session storage !");
            sessionStorage.setItem("token", data.token);
        }else{
            $("#infoZone").removeClass();
            $("#infoZone").addClass("alert alert-warning");
            $("#infoZone").text(data.status);
            sessionStorage.removeItem("token");
        }
    })
    .fail(function(jqXHR, textStatus, error){
        $("#infoZone").removeClass();
        $("#infoZone").addClass("alert alert-danger");
        $("#infoZone").text(error);
        sessionStorage.removeItem("token");
    });
}

/* Handle request for JWT token validation */
function validateToken(){
    var token = sessionStorage.getItem("token");
    var fingerprint = generateFingerprint();
    var fingerprintHash = CryptoJS.SHA256(fingerprint);
    var postData = "browserFingerprintDigest=" + encodeURIComponent(fingerprintHash);

    $.ajax({
        url: "/services/validate",
        type: "POST",
        beforeSend: function(xhr) {
            xhr.setRequestHeader("Authorization", "bearer " + token);
        },
        data: postData,
        success: function(data) {
            if (data.status.startsWith("Token OK")) {
                $("#infoZone").removeClass();
                $("#infoZone").addClass("alert alert-success");
                $("#infoZone").text(data.status);
            } else {
                $("#infoZone").removeClass();
                $("#infoZone").addClass("alert alert-warning");
                $("#infoZone").text(data.status);
            }
        },
        error: function(jqXHR, textStatus, error) {
            $("#infoZone").removeClass();
            $("#infoZone").addClass("alert alert-danger");
            $("#infoZone").text(error);
        },
    });
}
</pre>

= Know issue =

A issue exist in the implementation proposal about the retrieving of the client IP. Indeed, if the header ''X-Forwarded-For'' is present
then the method ''retrieveClientIP()'' get the client IP from this header according the header expected content.

The issue occur when the Web Application Firewall append the existing header ''X-Forwarded-For'' of the incoming request instead of overwriting
the header content with the real network IP of the incoming request.

If you don't have any Web Application Firewall or Reverse Proxy in front of your application so use directly the IP from the ''HttpServletRequest'' instance.


= Main references =

* JWT - https://jwt.io/introduction/
* Header "X-Forwarded-For" - https://en.wikipedia.org/wiki/X-Forwarded-For
* GCM - https://en.wikipedia.org/wiki/Galois/Counter_Mode
* AES-GCM - https://tools.ietf.org/html/rfc5084
* GCM NONCE - https://www.cryptologie.net/article/361/nonce-disrespecting-adversaries-practical-forgery-attacks-on-gcm-in-tls


